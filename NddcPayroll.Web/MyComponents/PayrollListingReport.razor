@page "/listingreport"
@using NddcPayrollLibrary.Data.Payroll;
@using NddcPayrollLibrary.Data.PayrollJournal;
@using Syncfusion.Blazor.Grids
@using NddcPayrollLibrary.Data.Reports;
@using NddcPayrollLibrary.Model.Report;
@using NddcPayrollLibrary.Model.Payroll;
@using Syncfusion.XlsIO;
@using Syncfusion.Drawing;

@inject IReportsData db;
@inject IPayrollData payDb;
@inject IPayrollJournalData payjoDb;


<div class="row">
    <div class="col-xl-12">
        <div class="card overflow-hidden">
            <div class="card-body bg-marketplace d-flex">
                <div class="flex-grow-1">
                    <h4 class="fs-18 lh-base mb-0">Payroll Listings Summary Report <br></h4>
                    <p class="mb-0 mt-2 pt-1 text-muted">View Summary Report of Benefits and Deductions for Entire Workforce</p>
                    <div class="d-flex gap-3 mt-4 col-md-4">
                        <select class="form-select" @bind="payrollJournalTitleId">
                            <option selected-disabled="false" value="0">Select Payroll List</option>
                            @foreach (var item in JournalTitles)
                            {
                                <option value="@item.Id">@item.JournalName - @item.MonthYear</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-3 mt-4">
                        <a @onclick="GenerateReport" class="btn btn-primary">Generate Report </a>
                    </div>
                    
                </div>
                <img src="assets/images/bg-d.png" alt="" class="img-fluid">
            </div>
        </div>
    </div><!--end col-->
</div>

@*<div class="card">
    <div class="card-body">
        <div class="row g-2">
            <div class="col-sm-4">
                <div class="search-box">
                    <h4 class="fs-18 lh-base mb-0">Payroll Listings Report Summary</h4>
                </div>
            </div>
                        <!--end col-->
            <div class="col-sm-auto ms-auto">
                <div class="list-grid-nav hstack gap-1">
                    <button @onclick="GenerateReport" class="btn btn-success addMembers-modal"><i class="ri-profile-line me-1 align-bottom"></i> Generate Report</button>
                    <button type="button" id="dropdownMenuLink1" data-bs-toggle="dropdown" aria-expanded="false" class="btn btn-soft-info btn-icon fs-14"><i class="ri-more-2-fill"></i></button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink1" style="">
                        <li><a class="dropdown-item" href="#">Save Report</a></li>
                        <li><a class="dropdown-item" href="#">Post Journal</a></li>
                        <li><a class="dropdown-item" href="#">Retreive Saved Report</a></li>
                    </ul>
                   
                </div>
            </div>
            <!--end col-->
        </div>
        <!--end row-->
    </div>
</div>*@

@if (ShowAnim == true)
{
    @*<div class="spinner-grow text-primary" role="status">
        <span>Loading Report Please Wait...</span>
    </div>*@
    <div class="text-center mb-3">
        <a href="javascript:void(0);" class="text-success"><i class="mdi mdi-loading mdi-spin fs-40 align-middle me-2"></i> Generating Report Please Wait </a>
    </div>
    @*<h4>@Message</h4>*@
}
else if (ShowGrid == true)
{
  
    <p>Time Elasped: @OpsTime Seconds</p>
    <SfGrid @ref="SfEmployeeGrid" DataSource="PayrollList" AllowResizing="true"  EnableVirtualization="true" ShowColumnChooser="true" EnableHeaderFocus="true" Height="600" AllowExcelExport="true" AllowPaging="false" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" Toolbar="@toolbar">
        @*<GridPageSettings PageSize="50" PageSizes="@(new string[] { "20", "50", "100", "200", "500", "All" })"></GridPageSettings>*@
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                   
                    <GridAggregateColumn Field=@nameof(MyPayRollListModel.BasicSalary) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(MyPayRollListModel.TotalEarnings) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                     <GridAggregateColumn Field=@nameof(MyPayRollListModel.TotalDeductions) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                     <GridAggregateColumn Field=@nameof(MyPayRollListModel.NetPay) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
                
            </GridAggregate>
        </GridAggregates>

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEvents OnToolbarClick="ToolbarBtnClickHandler" TValue="MyPayRollListModel"></GridEvents>
       
        <GridColumns>
            <GridColumn HeaderText="S/N" IsFrozen="true" Width="50" Field="@nameof(MyPayRollListModel.SrNo)"></GridColumn>
            <GridColumn HeaderText="Code" Width="100" IsFrozen="true" Field="@nameof(MyPayRollListModel.EmployeeCode)"></GridColumn>
            <GridColumn HeaderText="Last Name" IsFrozen="true" Width="120" Field="@nameof(MyPayRollListModel.LastName)"></GridColumn>
            <GridColumn HeaderText="First Name" IsFrozen="true"  Width="120" Field="@nameof(MyPayRollListModel.FirstName)"></GridColumn>
            <GridColumn HeaderText="Grade Level" IsFrozen="true" Width="120" Field="@nameof(MyPayRollListModel.GradeLevel)"></GridColumn>
            <GridColumn HeaderText="Department" Field="@nameof(MyPayRollListModel.DepartmentName)"></GridColumn>
            <GridColumn HeaderText="Category" Width="120" Field="@nameof(MyPayRollListModel.Category)"></GridColumn>
            <GridColumn HeaderText="Basic Salary" Width="120" Format="N" Field="@nameof(MyPayRollListModel.BasicSalary)"></GridColumn>
            
            <GridColumn HeaderText="Total Earnings" Format="N" Width="120" Field="@nameof(MyPayRollListModel.TotalEarnings)"></GridColumn>
            <GridColumn HeaderText="Total Deductions" Format="N" Width="120" Field="@nameof(MyPayRollListModel.TotalDeductions)"></GridColumn>
            <GridColumn HeaderText="Net Pay" Width="120" Format="N" Field="@nameof(MyPayRollListModel.NetPay)"></GridColumn>
            <GridColumn HeaderText="Code" Width="120" Field="@nameof(MyPayRollListModel.BankCode)"></GridColumn>
            <GridColumn HeaderText="Account NO" Width="120" Field="@nameof(MyPayRollListModel.AccountNumber)"></GridColumn>
            <GridColumn HeaderText="Bank" Width="120" Field="@nameof(MyPayRollListModel.BankName)"></GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    public string Message { get; set; }
    public List<MyPayRollListModel> PayrollList { get; set; }
    //[Parameter]
    public int payrollJournalTitleId { get; set; }
    List<MyPayrollJournalTitleModel> JournalTitles = new();

    private List<object> toolbar = new List<object> { "Search", "ExcelExport", "ColumnChooser" };
    private SfGrid<MyPayRollListModel>? SfEmployeeGrid { get; set; }

    protected override void OnInitialized()
    {
        //PayrollList = db.GetPayrollListReport();
        //Message = "";
        //Message = "Loading Report Please Wait ........";
        //PayrollList = await Task.Run(() => db.GetPayrollListReport());

        JournalTitles = payjoDb.GetPayrollJournalTitles();

    }
    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid.ExportToExcelAsync();

        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid.ExportToPdfAsync();
        }
        else if (args.Item.Id == "XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }
    public double OpsTime { get; set; }
    public bool ShowAnim { get; set; }    
    public bool ShowGrid { get; set; }    
    private async Task GenerateReport()
    {
        ShowAnim = true;
        var watch = System.Diagnostics.Stopwatch.StartNew();
        Message = "Loading Report Please Wait ........";
        //PayrollList = await Task.Run(() => db.GetPayrollListReport2Async());
        PayrollList = await Task.Run(() => db.GetPayrollListSummaryReportAsync(payrollJournalTitleId));
        //Message = "";
        watch.Stop();
        OpsTime = watch.ElapsedMilliseconds/1000;
        ShowAnim = false;
        ShowGrid = true;
    }

    //private async Task UpdateEmployeePayroll()
    //{
    //    ShowAnim = true;
    //    var watch = System.Diagnostics.Stopwatch.StartNew();
    //    Message = "Updating Employees Please Wait ........";
    //    await Task.Run(() => db.UpdateEmployeesPayrollAsync());
    //    //Message = "";
    //    watch.Stop();
    //    OpsTime = watch.ElapsedMilliseconds / 1000;
    //    ShowAnim = false;
    //    ShowGrid = true;
    //}
    public MemoryStream CreateExcel()
    {
        //Create an instance of ExcelEngine
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Excel2016;

            //Create a workbook
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];


            //Disable gridlines in the worksheet
            worksheet.IsGridLinesVisible = false;

            //Enter values to the cells from A3 to A5
            worksheet.Range["A3"].Text = "Niger Delta Development Commission";
            worksheet.Range["A4"].Text = "Payroll Listing Report";
            worksheet.Range["A5"].Text = "March 2023";

            //Make the text bold
            worksheet.Range["A3:A5"].CellStyle.Font.Bold = true;

            //Merge cells
            //worksheet.Range["D1:E1"].Merge();

            //Enter text to the cell D1 and apply formatting.
            //worksheet.Range["D1"].Text = "INVOICE";
            //worksheet.Range["D1"].CellStyle.Font.Bold = true;
            //worksheet.Range["D1"].CellStyle.Font.RGBColor = Color.FromArgb(42, 118, 189);
            //worksheet.Range["D1"].CellStyle.Font.Size = 35;

            //Apply alignment in the cell D1
            //worksheet.Range["D1"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignRight;
            //worksheet.Range["D1"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            ////Enter values to the cells from D5 to E8
            //worksheet.Range["D5"].Text = "INVOICE#";
            //worksheet.Range["E5"].Text = "DATE";
            //worksheet.Range["D6"].Number = 1028;
            //worksheet.Range["E6"].Value = "12/31/2018";
            //worksheet.Range["D7"].Text = "CUSTOMER ID";
            //worksheet.Range["E7"].Text = "TERMS";
            //worksheet.Range["D8"].Number = 564;
            //worksheet.Range["E8"].Text = "Due Upon Receipt";

            //Apply RGB backcolor to the cells from D5 to E8
            //worksheet.Range["D5:E5"].CellStyle.Color = Color.FromArgb(42, 118, 189);
            //worksheet.Range["D7:E7"].CellStyle.Color = Color.FromArgb(42, 118, 189);

            //Apply known colors to the text in cells D5 to E8
            //worksheet.Range["D5:E5"].CellStyle.Font.Color = ExcelKnownColors.White;
            //worksheet.Range["D7:E7"].CellStyle.Font.Color = ExcelKnownColors.White;

            //Make the text as bold from D5 to E8
            //worksheet.Range["D5:E8"].CellStyle.Font.Bold = true;

            //Apply alignment to the cells from D5 to E8
            //worksheet.Range["D5:E8"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            //worksheet.Range["D5:E5"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            //worksheet.Range["D7:E7"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;
            //worksheet.Range["D6:E6"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignTop;

            //Enter value and applying formatting in the cell A7
            //worksheet.Range["A7"].Text = "  BILL TO";
            //worksheet.Range["A7"].CellStyle.Color = Color.FromArgb(42, 118, 189);
            //worksheet.Range["A7"].CellStyle.Font.Bold = true;
            //worksheet.Range["A7"].CellStyle.Font.Color = ExcelKnownColors.White;

            //Apply alignment
            //worksheet.Range["A7"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            //worksheet.Range["A7"].CellStyle.VerticalAlignment = ExcelVAlign.VAlignCenter;

            //Enter values in the cells A8 to A12
            worksheet.Range["A8"].Text = "Steyn";
            worksheet.Range["A9"].Text = "Great Lakes Food Market";
            worksheet.Range["A10"].Text = "20 Whitehall Rd";
            worksheet.Range["A11"].Text = "North Muskegon,USA";
            worksheet.Range["A12"].Text = "+1 231-654-0000";

            //Create a Hyperlink for e-mail in the cell A13
            IHyperLink hyperlink = worksheet.HyperLinks.Add(worksheet.Range["A13"]);
            hyperlink.Type = ExcelHyperLinkType.Url;
            hyperlink.Address = "Steyn@greatlakes.com";
            hyperlink.ScreenTip = "Send Mail";

            //Merge column A and B from row 15 to 22
            worksheet.Range["A15:B15"].Merge();
            worksheet.Range["A16:B16"].Merge();
            worksheet.Range["A17:B17"].Merge();
            worksheet.Range["A18:B18"].Merge();
            worksheet.Range["A19:B19"].Merge();
            worksheet.Range["A20:B20"].Merge();
            worksheet.Range["A21:B21"].Merge();
            worksheet.Range["A22:B22"].Merge();

            //Enter details of products and prices
            worksheet.Range["A15"].Text = "  DESCRIPTION";
            worksheet.Range["C15"].Text = "QTY";
            worksheet.Range["D15"].Text = "UNIT PRICE";
            worksheet.Range["E15"].Text = "AMOUNT";
            worksheet.Range["A16"].Text = "Cabrales Cheese";
            worksheet.Range["A17"].Text = "Chocos";
            worksheet.Range["A18"].Text = "Pasta";
            worksheet.Range["A19"].Text = "Cereals";
            worksheet.Range["A20"].Text = "Ice Cream";
            worksheet.Range["C16"].Number = 3;
            worksheet.Range["C17"].Number = 2;
            worksheet.Range["C18"].Number = 1;
            worksheet.Range["C19"].Number = 4;
            worksheet.Range["C20"].Number = 3;
            worksheet.Range["D16"].Number = 21;
            worksheet.Range["D17"].Number = 54;
            worksheet.Range["D18"].Number = 10;
            worksheet.Range["D19"].Number = 20;
            worksheet.Range["D20"].Number = 30;
            worksheet.Range["D23"].Text = "Total";

            //Apply number format
            worksheet.Range["D16:E22"].NumberFormat = "$.00";
            worksheet.Range["E23"].NumberFormat = "$.00";

            //Apply incremental formula for column Amount by multiplying Qty and UnitPrice
            application.EnableIncrementalFormula = true;
            worksheet.Range["E16:E20"].Formula = "=C16*D16";

            //Formula for Sum the total
            worksheet.Range["E23"].Formula = "=SUM(E16:E22)";

            //Apply borders
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].Color = ExcelKnownColors.Grey_25_percent;
            worksheet.Range["A16:E22"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].Color = ExcelKnownColors.Grey_25_percent;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].LineStyle = ExcelLineStyle.Thin;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeTop].Color = ExcelKnownColors.Black;
            worksheet.Range["A23:E23"].CellStyle.Borders[ExcelBordersIndex.EdgeBottom].Color = ExcelKnownColors.Black;

            //Apply font setting for cells with product details
            worksheet.Range["A3:E23"].CellStyle.Font.FontName = "Arial";
            worksheet.Range["A3:E23"].CellStyle.Font.Size = 10;
            worksheet.Range["A15:E15"].CellStyle.Font.Color = ExcelKnownColors.White;
            worksheet.Range["A15:E15"].CellStyle.Font.Bold = true;
            worksheet.Range["D23:E23"].CellStyle.Font.Bold = true;

            //Apply cell color
            worksheet.Range["A15:E15"].CellStyle.Color = Color.FromArgb(42, 118, 189);

            //Apply alignment to cells with product details
            worksheet.Range["A15"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignLeft;
            worksheet.Range["C15:C22"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;
            worksheet.Range["D15:E15"].CellStyle.HorizontalAlignment = ExcelHAlign.HAlignCenter;

            //Apply row height and column width to look good
            worksheet.Range["A1"].ColumnWidth = 36;
            worksheet.Range["B1"].ColumnWidth = 11;
            worksheet.Range["C1"].ColumnWidth = 8;
            worksheet.Range["D1:E1"].ColumnWidth = 18;
            worksheet.Range["A1"].RowHeight = 47;
            worksheet.Range["A2"].RowHeight = 15;
            worksheet.Range["A3:A4"].RowHeight = 15;
            worksheet.Range["A5"].RowHeight = 18;
            worksheet.Range["A6"].RowHeight = 29;
            worksheet.Range["A7"].RowHeight = 18;
            worksheet.Range["A8"].RowHeight = 15;
            worksheet.Range["A9:A14"].RowHeight = 15;
            worksheet.Range["A15:A23"].RowHeight = 18;

            //Save the document as a stream and retrun the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);
                return stream;
            }
        }
    }

}
