@page "/listingreport"
@using NddcPayrollLibrary.Data.Payroll;
@using NddcPayrollLibrary.Data.PayrollJournal;
@using Syncfusion.Blazor.Grids
@using NddcPayrollLibrary.Data.Reports;
@using NddcPayrollLibrary.Model.Report;
@using NddcPayrollLibrary.Model.Payroll;
@inject IReportsData db;
@inject IPayrollData payDb;
@inject IPayrollJournalData payjoDb;

<div class="row">
    <div class="col-xl-12">
        <div class="card overflow-hidden">
            <div class="card-body bg-marketplace d-flex">
                <div class="flex-grow-1">
                    <h4 class="fs-18 lh-base mb-0">Payroll Listings Summary Report <br></h4>
                    <p class="mb-0 mt-2 pt-1 text-muted">View Summary Report of Benefits and Deductions for Entire Workforce</p>
                    <div class="d-flex gap-3 mt-4 col-md-4">
                        <select class="form-select" @bind="payrollJournalTitleId">
                            <option selected-disabled="false" value="0">Select Payroll List</option>
                            @foreach (var item in JournalTitles)
                            {
                                <option value="@item.Id">@item.JournalName - @item.MonthYear</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-3 mt-4">
                        <a @onclick="GenerateReport" class="btn btn-primary">Generate Report </a>
                    </div>
                    
                </div>
                <img src="assets/images/bg-d.png" alt="" class="img-fluid">
            </div>
        </div>
    </div><!--end col-->
</div>

@*<div class="card">
    <div class="card-body">
        <div class="row g-2">
            <div class="col-sm-4">
                <div class="search-box">
                    <h4 class="fs-18 lh-base mb-0">Payroll Listings Report Summary</h4>
                </div>
            </div>
                        <!--end col-->
            <div class="col-sm-auto ms-auto">
                <div class="list-grid-nav hstack gap-1">
                    <button @onclick="GenerateReport" class="btn btn-success addMembers-modal"><i class="ri-profile-line me-1 align-bottom"></i> Generate Report</button>
                    <button type="button" id="dropdownMenuLink1" data-bs-toggle="dropdown" aria-expanded="false" class="btn btn-soft-info btn-icon fs-14"><i class="ri-more-2-fill"></i></button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink1" style="">
                        <li><a class="dropdown-item" href="#">Save Report</a></li>
                        <li><a class="dropdown-item" href="#">Post Journal</a></li>
                        <li><a class="dropdown-item" href="#">Retreive Saved Report</a></li>
                    </ul>
                   
                </div>
            </div>
            <!--end col-->
        </div>
        <!--end row-->
    </div>
</div>*@

@if (ShowAnim == true)
{
    @*<div class="spinner-grow text-primary" role="status">
        <span>Loading Report Please Wait...</span>
    </div>*@
    <div class="text-center mb-3">
        <a href="javascript:void(0);" class="text-success"><i class="mdi mdi-loading mdi-spin fs-40 align-middle me-2"></i> Generating Report Please Wait </a>
    </div>
    @*<h4>@Message</h4>*@
}
else if (ShowGrid == true)
{
  
    <p>Time Elasped: @OpsTime Seconds</p>
    <SfGrid @ref="SfEmployeeGrid" DataSource="PayrollList" AllowResizing="true"  EnableVirtualization="true" ShowColumnChooser="true" EnableHeaderFocus="true" Height="600" AllowExcelExport="true" AllowPaging="false" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" Toolbar="@toolbar">
        @*<GridPageSettings PageSize="50" PageSizes="@(new string[] { "20", "50", "100", "200", "500", "All" })"></GridPageSettings>*@
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>
                   
                    <GridAggregateColumn Field=@nameof(MyPayRollListModel.BasicSalary) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(MyPayRollListModel.TotalEarnings) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                     <GridAggregateColumn Field=@nameof(MyPayRollListModel.TotalDeductions) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                     <GridAggregateColumn Field=@nameof(MyPayRollListModel.NetPay) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
                
            </GridAggregate>
        </GridAggregates>

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEvents OnToolbarClick="ToolbarBtnClickHandler" TValue="MyPayRollListModel"></GridEvents>
       
        <GridColumns>
            <GridColumn HeaderText="S/N" IsFrozen="true" Width="50" Field="@nameof(MyPayRollListModel.SrNo)"></GridColumn>
            <GridColumn HeaderText="Code" Width="100" IsFrozen="true" Field="@nameof(MyPayRollListModel.EmployeeCode)"></GridColumn>
            <GridColumn HeaderText="Last Name" IsFrozen="true" Width="120" Field="@nameof(MyPayRollListModel.LastName)"></GridColumn>
            <GridColumn HeaderText="First Name" IsFrozen="true"  Width="120" Field="@nameof(MyPayRollListModel.FirstName)"></GridColumn>
            <GridColumn HeaderText="Grade Level" IsFrozen="true" Width="120" Field="@nameof(MyPayRollListModel.GradeLevel)"></GridColumn>
            <GridColumn HeaderText="Department" Field="@nameof(MyPayRollListModel.DepartmentName)"></GridColumn>
            <GridColumn HeaderText="Category" Width="120" Field="@nameof(MyPayRollListModel.Category)"></GridColumn>
            <GridColumn HeaderText="Basic Salary" Width="120" Format="N" Field="@nameof(MyPayRollListModel.BasicSalary)"></GridColumn>
            
            <GridColumn HeaderText="Total Earnings" Format="N" Width="120" Field="@nameof(MyPayRollListModel.TotalEarnings)"></GridColumn>
            <GridColumn HeaderText="Total Deductions" Format="N" Width="120" Field="@nameof(MyPayRollListModel.TotalDeductions)"></GridColumn>
            <GridColumn HeaderText="Net Pay" Width="120" Format="N" Field="@nameof(MyPayRollListModel.NetPay)"></GridColumn>
            <GridColumn HeaderText="Code" Width="120" Field="@nameof(MyPayRollListModel.BankCode)"></GridColumn>
            <GridColumn HeaderText="Account NO" Width="120" Field="@nameof(MyPayRollListModel.AccountNumber)"></GridColumn>
            <GridColumn HeaderText="Bank" Width="120" Field="@nameof(MyPayRollListModel.BankName)"></GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    public string Message { get; set; }
    public List<MyPayRollListModel> PayrollList { get; set; }
    //[Parameter]
    public int payrollJournalTitleId { get; set; }
    List<MyPayrollJournalTitleModel> JournalTitles = new();

    private List<object> toolbar = new List<object> { "Search", "ExcelExport", "ColumnChooser" };
    private SfGrid<MyPayRollListModel>? SfEmployeeGrid { get; set; }

    protected override void OnInitialized()
    {
        //PayrollList = db.GetPayrollListReport();
        //Message = "";
        //Message = "Loading Report Please Wait ........";
        //PayrollList = await Task.Run(() => db.GetPayrollListReport());

        JournalTitles = payjoDb.GetPayrollJournalTitles();

    }
    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid.ExportToExcelAsync();

        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid.ExportToPdfAsync();
        }
        else if (args.Item.Id == "XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }
    public double OpsTime { get; set; }
    public bool ShowAnim { get; set; }    
    public bool ShowGrid { get; set; }    
    private async Task GenerateReport()
    {
        ShowAnim = true;
        var watch = System.Diagnostics.Stopwatch.StartNew();
        Message = "Loading Report Please Wait ........";
        //PayrollList = await Task.Run(() => db.GetPayrollListReport2Async());
        PayrollList = await Task.Run(() => db.GetPayrollListSummaryReportAsync(payrollJournalTitleId));
        //Message = "";
        watch.Stop();
        OpsTime = watch.ElapsedMilliseconds/1000;
        ShowAnim = false;
        ShowGrid = true;
    }

    //private async Task UpdateEmployeePayroll()
    //{
    //    ShowAnim = true;
    //    var watch = System.Diagnostics.Stopwatch.StartNew();
    //    Message = "Updating Employees Please Wait ........";
    //    await Task.Run(() => db.UpdateEmployeesPayrollAsync());
    //    //Message = "";
    //    watch.Stop();
    //    OpsTime = watch.ElapsedMilliseconds / 1000;
    //    ShowAnim = false;
    //    ShowGrid = true;
    //}


}
