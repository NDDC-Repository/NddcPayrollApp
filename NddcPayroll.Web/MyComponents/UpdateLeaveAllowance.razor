@page "/updateleaveallowance"

@using NddcPayrollLibrary.Data.Calculations.Deductions;
@using NddcPayrollLibrary.Data.EmployeeData;
@using Syncfusion.XlsIO;
@using System.IO;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System.Data
@using System.Dynamic
@using System.Data.SqlClient;
@inject IConfiguration ConfigurationManager
@inject IEmployeeData empDb
@inject IDeductionData dedDb


<SfUploader AutoUpload="false">
    <UploaderEvents ValueChange="OnChange"></UploaderEvents>
</SfUploader>

@if (ShowAnim == true)
{
    @*<div class="spinner-grow text-primary" role="status">
        <span>Loading Report Please Wait...</span>
    </div>*@
    <div class="text-center mb-3">
        <a href="javascript:void(0);" class="text-success"><i class="mdi mdi-loading mdi-spin fs-40 align-middle me-2"></i> Uploading Leave Allowance Data and Recalculating Net Pay .... </a>
    </div>
    @*<h4>@Message</h4>*@
}

@if (Columns != null)
{
    <SfGrid @ref="Grid" DataSource="@CustomerList" AllowFiltering="true" AllowPaging="true">
        <GridColumns>
            @{
                foreach (var val in Columns)
                {
                    <GridColumn Field="@val"></GridColumn>
                }
            }
        </GridColumns>
    </SfGrid>
}
@*else
{
    <div>Upload Formated Excel File Containing Insurance Premiums for Employees</div>
}*@



@code {

    public bool ShowAnim { get; set; }
    SfGrid<ExpandoObject> Grid;
    public DataTable table = new DataTable();

    private void OnChange(UploadChangeEventArgs args)
    {
        ShowAnim = true;

        foreach (var file in args.Files)
        {
            var path = @"wwwroot\" + file.FileInfo.Name;
            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Excel2016;

            //get local wwwroot path of application
            //var check = GetPath(path);
            //create new filestream into above path
            FileStream openFileStream = new FileStream(path, FileMode.Create, FileAccess.Write);
            //write the uploaded memorystream to file stream
            file.Stream.WriteTo(openFileStream);
            //again open the filstream from that path
            FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            //access the workbook from that filtestream
            IWorkbook workbook = application.Workbooks.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];
            IRange range = worksheet.Range;
            //get datatable from workbook
            table = worksheet.ExportDataTable(worksheet.UsedRange, ExcelExportDataTableOptions.ColumnNames);
            //convert to dynamic list and append to Grid.
            GenerateListFromTable(table);
            UpdateDb(worksheet, table);
        }

        ShowAnim = false;
    }
    private void UpdateDb(IWorksheet ws, DataTable input)
    {
        //dedDb.ClearCoopValues();
        string empCode;
        double amount;
        int r = 2;
        foreach (DataRow row in input.Rows)
        {

            //Product p = new Product();
            empCode = ws[$"A{r}"].Value;
            amount = ws[$"B{r}"].Number;
            empDb.UpdateLeaveAllowance(empCode, amount);
            dedDb.RecalculateManualForDeductions(empCode);
            //listProducts.Add(p);
            r = r + 1;
        }
    }

    string[] Columns;
    public List<ExpandoObject> CustomerList;
    public void GenerateListFromTable(DataTable input)
    {
        var list = new List<ExpandoObject>();
        Columns = input.Columns.Cast<DataColumn>()
                             .Select(x => x.ColumnName)
                             .ToArray();
        foreach (DataRow row in input.Rows)
        {
            System.Dynamic.ExpandoObject e = new System.Dynamic.ExpandoObject();
            foreach (DataColumn col in input.Columns)
                e.TryAdd(col.ColumnName, row.ItemArray[col.Ordinal]);
            list.Add(e);
        }
        CustomerList = list;
    }



    //public List<LifeAssuranceModel> CustomerList2;
    //public LifeAssuranceModel LifeAssure { get; set; }
    //public void GenerateListFromTable2(DataTable input)
    //{
    //    var list = new List<LifeAssuranceModel>();
    //    Columns = input.Columns.Cast<DataColumn>()
    //                         .Select(x => x.ColumnName)
    //                         .ToArray();
    //    foreach (DataRow row in input.Rows)
    //    {

    //        System.Dynamic.ExpandoObject e = new System.Dynamic.ExpandoObject();
    //        foreach (DataColumn col in input.Columns)
    //            e.TryAdd(col.ColumnName, row.ItemArray[col.Ordinal]);
    //        list.Add(e);
    //    }
    //    CustomerList2 = list;
    //}

    //public class LifeAssuranceModel
    //{
    //    public string EmpCode { get; set; }
    //    public string Surname { get; set; }
    //    public string FullNames { get; set; }
    //    public string LifeAssurance { get; set; }
    //}


}