@page "/payesummaryreport"
@using Syncfusion.Blazor.Grids
@using NddcPayrollLibrary.Data.Reports;
@using NddcPayrollLibrary.Model.Report;
@inject IReportsData db;


@*<div class="card">
    <div class="card-body">
        <div class="row g-2">
            <div class="col-sm-4">
                <div class="search-box">
                   
                    <h4 class="fs-18 lh-base mb-0">Summary of PAYE Tax Deductions</h4>
                </div>
            </div>
            <!--end col-->
            <div class="col-sm-auto ms-auto">
                <div class="list-grid-nav hstack gap-1">
                    <button @onclick="GenerateReport" class="btn btn-success addMembers-modal"><i class="ri-profile-line me-1 align-bottom"></i> Generate Report</button>
                    <button type="button" id="dropdownMenuLink1" data-bs-toggle="dropdown" aria-expanded="false" class="btn btn-soft-info btn-icon fs-14"><i class="ri-more-2-fill"></i></button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink1" style="">
                        <li><a class="dropdown-item" href="#">Post Journal</a></li>
                        <li><a class="dropdown-item" href="#">View Journals</a></li>
                    </ul>

                </div>
            </div>
            <!--end col-->
        </div>
        <!--end row-->
    </div>
</div>*@

@if (ShowAnim == true)
{
    @*<div class="spinner-grow text-primary" role="status">
        <span>Loading Report Please Wait...</span>
    </div>*@
    <div class="text-center mb-3">
        <a href="javascript:void(0);" class="text-success"><i class="mdi mdi-loading mdi-spin fs-40 align-middle me-2"></i> Generating Report Please Wait </a>
    </div>
    @*<h4>@Message</h4>*@
}
else if (ShowGrid == true)
{

    <p>Time Elasped: @OpsTime Seconds</p>
    <SfGrid @ref="SfEmployeeGrid" DataSource="PayeSummaryList" AllowResizing="true" AllowTextWrap="true" EnableVirtualization="false" ShowColumnChooser="true" EnableHeaderFocus="true" Height="400" AllowExcelExport="true" AllowPaging="false" AllowFiltering="true" AllowSorting="true" AllowGrouping="false" Toolbar="@toolbar">
        @*<GridPageSettings PageSize="50" PageSizes="@(new string[] { "20", "50", "100", "200", "500", "All" })"></GridPageSettings>*@

        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>

                    <GridAggregateColumn Field=@nameof(MyPayeReportSummaryModel.EmployeeCount) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(MyPayeReportSummaryModel.GrossIncome) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(MyPayeReportSummaryModel.Tax) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    
                </GridAggregateColumns>

            </GridAggregate>
        </GridAggregates>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEvents OnToolbarClick="ToolbarBtnClickHandler" TValue="MyPayeReportSummaryModel"></GridEvents>
        <GridColumns>
            <GridColumn HeaderText="Location" Width="50" Field="@nameof(MyPayeReportSummaryModel.Location)"></GridColumn>
            <GridColumn HeaderText="No. Of Employees" Width="120" Field="@nameof(MyPayeReportSummaryModel.EmployeeCount)"></GridColumn>
            <GridColumn HeaderText="Gross Income" Width="120" Format="N" Field="@nameof(MyPayeReportSummaryModel.GrossIncome)"></GridColumn>
            <GridColumn HeaderText="Tax For Location" Width="150" Format="N" Field="@nameof(MyPayeReportSummaryModel.Tax)"></GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    public string Message { get; set; }
    public List<MyPayeReportSummaryModel> PayeSummaryList { get; set; }

    private List<object> toolbar = new List<object> { "Search", "ExcelExport", "ColumnChooser" };
    private SfGrid<MyPayeReportSummaryModel>? SfEmployeeGrid { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    //PayrollList = db.GetPayrollListReport();
    //    //Message = "";
    //    //Message = "Loading Report Please Wait ........";
    //    PayrollList = await Task.Run(() => db.GetPayrollListReport());

    //}
   

    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid.ExportToExcelAsync();

        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid.ExportToPdfAsync();
        }
        else if (args.Item.Id == "XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }
    public double OpsTime { get; set; }
    public bool ShowAnim { get; set; }
    public bool ShowGrid { get; set; }
    private async Task GenerateReport()
    {
        ShowAnim = true;
        var watch = System.Diagnostics.Stopwatch.StartNew();
        Message = "Loading Report Please Wait ........";
        PayeSummaryList = await Task.Run(() => db.GetPayeSummaryReportAsync());
        //Message = "";
        watch.Stop();
        OpsTime = watch.ElapsedMilliseconds / 1000;
        ShowAnim = false;
        ShowGrid = true;
    }

    protected override async Task OnInitializedAsync()
    {
        ShowAnim = true;
        var watch = System.Diagnostics.Stopwatch.StartNew();
        Message = "Loading Report Please Wait ........";
        PayeSummaryList = await Task.Run(() => db.GetPayeSummaryReportAsync());
        //Message = "";
        watch.Stop();
        OpsTime = watch.ElapsedMilliseconds / 1000;
        ShowAnim = false;
        ShowGrid = true;
    }

}
