@using NddcPayrollLibrary.Data.Reports;
@using NddcPayrollLibrary.Model.Company;
@using NddcPayrollLibrary.Model.Report;
@using Syncfusion.Blazor.Grids

@inject ICompanyData compDb;
@inject IReportsData repDb;


<div class="row">
    <div class="col-xl-12">
        <div class="card overflow-hidden">
            <div class="card-body bg-marketplace d-flex">
                <div class="flex-grow-1">
                    <h4 class="fs-18 lh-base mb-0">Employee Pension Report <br></h4>
                    <p class="mb-0 mt-2 pt-1 text-muted">View Summary Report of PAYE Pension for Entire Workforce</p>
                    <div class="d-flex gap-3 mt-4 col-md-4">
                        <select class="form-select" @bind="PensionFundId">
                            <option selected-disabled="false" value="0">Select Payroll List</option>
                            @foreach (var item in PFAList)
                            {
                                <option value="@item.Id">@item.Description</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-3 mt-4">
                        <a @onclick="GenerateReport" class="btn btn-primary">Generate Report </a>
                    </div>

                </div>
                <img src="assets/images/bg-d.png" alt="" class="img-fluid">
            </div>
        </div>
    </div><!--end col-->
</div>


@if (ShowAnim == true)
{
    @*<div class="spinner-grow text-primary" role="status">
        <span>Loading Report Please Wait...</span>
    </div>*@
    <div class="text-center mb-3">
        <a href="javascript:void(0);" class="text-success"><i class="mdi mdi-loading mdi-spin fs-40 align-middle me-2"></i> Generating Report Please Wait </a>
    </div>
    @*<h4>@Message</h4>*@
}
else if (ShowGrid == true)
{
  
    <p>Time Elasped: @OpsTime Seconds</p>
    <SfGrid @ref="SfEmployeeGrid" DataSource="EmpPensionList" AllowResizing="true" EnableVirtualization="true" ShowColumnChooser="true" Height="600" AllowExcelExport="true" AllowPaging="false" AllowFiltering="true" AllowSorting="true" AllowGrouping="true" Toolbar="@toolbar">
        @*<GridPageSettings PageSize="50" PageSizes="@(new string[] { "20", "50", "100", "200", "500", "All" })"></GridPageSettings>*@
        <GridAggregates>
            <GridAggregate>
                <GridAggregateColumns>

                    <GridAggregateColumn Field=@nameof(PensionSummaryModel.EmployerPension) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(PensionSummaryModel.EmployeePension) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(PensionSummaryModel.VoluntaryPension) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                    <GridAggregateColumn Field=@nameof(PensionSummaryModel.Total) Type="AggregateType.Sum" Format="N">
                        <FooterTemplate>
                            @{
                                var aggregate = (context as AggregateTemplateContext);
                                <div>
                                    <p>@aggregate.Sum</p>
                                </div>
                            }
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
                
            </GridAggregate>
        </GridAggregates>

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEvents OnToolbarClick="ToolbarBtnClickHandler" TValue="PensionSummaryModel"></GridEvents>
       
        <GridColumns>
            <GridColumn HeaderText="Code" IsFrozen="false" Width="70" Field="@nameof(PensionSummaryModel.EmployeeCode)"></GridColumn>
            <GridColumn HeaderText="Employee Name" Width="100" IsFrozen="false" Field="@nameof(PensionSummaryModel.EmployeeName)"></GridColumn>
            <GridColumn HeaderText="RSA PIN NO." IsFrozen="false" Width="70" Field="@nameof(PensionSummaryModel.RSAPin)"></GridColumn>
           
            <GridColumn HeaderText="Curr-Employer" Width="70" Field="@nameof(PensionSummaryModel.EmployerPension)"></GridColumn>
            <GridColumn HeaderText="Curr-Employee" Width="70" Field="@nameof(PensionSummaryModel.EmployeePension)"></GridColumn>
            <GridColumn HeaderText="Voluntary Employee" Width="70" Format="N" Field="@nameof(PensionSummaryModel.VoluntaryPension)"></GridColumn>
            <GridColumn HeaderText="Total" Width="70" Format="N" Field="@nameof(PensionSummaryModel.Total)"></GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    public string Message { get; set; }
    public List<PensionSummaryModel> EmpPensionList { get; set; }


    private List<object> toolbar = new List<object> { "Search", "ExcelExport", "ColumnChooser" };
    private SfGrid<PensionSummaryModel>? SfEmployeeGrid { get; set; }


    public List<PensionAdminModel> PFAList { get; set; }
    public int PensionFundId { get; set; }

    protected override void OnInitialized()
    {
        PFAList = compDb.GetAllPensionAdmins();
    }

    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid.ExportToExcelAsync();

        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid.ExportToPdfAsync();
        }
        else if (args.Item.Id == "XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }

    public double OpsTime { get; set; }
    public bool ShowAnim { get; set; }
    public bool ShowGrid { get; set; }
    public void GenerateReport()
    {
        ShowAnim = true;
        var watch = System.Diagnostics.Stopwatch.StartNew();
        Message = "Loading Report Please Wait ........";
        //PayrollList = await Task.Run(() => db.GetPayrollListReport2Async());
        EmpPensionList = repDb.GetPFASummaryForEmployees(PensionFundId);
        //Message = "";
        watch.Stop();
        OpsTime = watch.ElapsedMilliseconds / 1000;
        ShowAnim = false;
        ShowGrid = true;
    }
}
